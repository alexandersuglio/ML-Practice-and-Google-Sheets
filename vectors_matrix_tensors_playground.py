# -*- coding: utf-8 -*-
"""Vectors Matrix Tensors Playground.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Pfz6LRNs_9-uYfm7ZhlHqPd9XXFVUMUN
"""

# Vector and Matrix using vanilla Python
vector = [1, 2, 3]
matrix = [
    [1, 2, 3],
    [4, 5, 6]
]
vector2 = [4, 5, 6]

# Vector addition (manual, same length)
vector_sum = [a + b for a, b in zip(vector, vector2)]

# Dot product
dot_product = sum(a * b for a, b in zip(vector, vector2))

# Transpose
transpose_matrix = list(map(list, zip(*matrix)))

# Element-wise multiplication (vectors)
elementwise = [a * b for a, b in zip(vector, vector2)]

# Matrix multiplication (2x3) x (3x1)
vector3 = [[1], [2], [3]]
matrix_product = [
    [sum(a*b for a, b in zip(row, col)) for col in zip(*vector3)]
    for row in matrix
]

print("Original Vector: ", vector)
print("Original Vector2:", vector2)
print("Original Matrix: ", matrix)
print("--------------------------")
print("Vanilla Python Results:")
print("Vector Sum:", vector_sum)
print("Dot Product:", dot_product)
print("Transpose:", transpose_matrix)
print("Elementwise:", elementwise)
print("Matrix Multiplication aka Matrix Product:", matrix_product)

# using Numpy
import numpy as np

vector = np.array([1, 2, 3])
matrix = np.array([[1, 2, 3], [4, 5, 6]])
vector2 = np.array([4, 5, 6])

# Vector Addition
vector_sum = vector + vector2

# Dot Product
dot_product = np.dot(vector, vector2)

# Matrix Transpose
transpose = matrix.T

# Element-Wise Multiplication
elementwise = vector * vector2

# Matrix Product
matrix_product = np.dot(matrix, vector.reshape(-1, 1))


print("Original Vector: ", vector)
print("Original Vector2:", vector2)
print("Original Matrix: ", matrix)
print("--------------------------")
print("\nNumPy Results:")
print("Vector Sum:", vector_sum)
print("Dot Product:", dot_product)
print("Transpose:\n", transpose)
print("Elementwise:", elementwise)
print("Matrix Multiplication aka Matrix Product:", matrix_product)

# Using TensorFlow
import tensorflow as tf

vector = tf.constant([1, 2, 3], dtype=tf.float32)
matrix = tf.constant([[1, 2, 3], [4, 5, 6]], dtype=tf.float32)
vector2 = tf.constant([4, 5, 6], dtype=tf.float32)

# Vector Addition
vector_sum = vector + vector2

# Dot Product
dot_product = tf.tensordot(vector, vector2, axes=1)

# Matrix Transpose
transpose = tf.transpose(matrix)

# Element-Wise Multiplication
elementwise = tf.multiply(vector, vector2)

# Matrix Product
matrix_product = tf.matmul(matrix, tf.reshape(vector, (-1, 1)))

print("Original Vector: ", vector)
print("Original Vector2:", vector2)
print("Original Matrix: ", matrix)
print("--------------------------")
print("\nTensorFlow Results:")
print("Vector Sum:", vector_sum)
print("Dot Product:", dot_product)
print("Transpose:\n", transpose)
print("Elementwise:", elementwise)
print("Matrix Multiplication aka Matrix Product:", matrix_product)

# Using Pytorch
import torch

vector = torch.tensor([1, 2, 3], dtype=torch.float32)
matrix = torch.tensor([[1, 2, 3], [4, 5, 6]], dtype=torch.float32)
vector2 = torch.tensor([4, 5, 6], dtype=torch.float32)

# Vector Addition
vector_sum = vector + vector2

# Dot Product
dot_product = torch.dot(vector, vector2)

# Matrix Transpose
transpose = matrix.T

# Element-Wise Multiplication
elementwise = vector * vector2

# Matrix Product
matrix_product = torch.matmul(matrix, vector.unsqueeze(1))

print("Original Vector: ", vector)
print("Original Vector2:", vector2)
print("Original Matrix: ", matrix)
print("--------------------------")
print("\nPyTorch Results:")
print("Vector Sum:", vector_sum)
print("Dot Product:", dot_product)
print("Transpose:\n", transpose)
print("Elementwise:", elementwise)
print("Matrix Multiplication aka Matrix Product:", matrix_product)